{"version":3,"sources":["components/Persons/Persons.module.css","components/Person/Person.module.css","components/UI/Button/Button.module.css","components/UI/InputText/InputText.module.css","components/UI/Loader/Loader.module.css","components/UI/InputText/InputText.js","domain/person.js","components/Person/Person.js","components/UI/Button/Button.js","components/UI/Loader/Loader.js","utils/email.js","constants/values.js","components/Persons/Persons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputText","props","value","onChange","changed","className","classes","type","placeholder","PersonData","id","name","email","this","Person","useState","setName","setEmail","setId","useEffect","data","length","event","target","onUpdate","PersonName","PersonEmail","Button","btnType","join","onClick","onClicked","children","Loader","handlePersons","persons","a","result","p","console","log","sendMessage","messageRes","mapResult","to","toName","paramsData","service_id","template_id","user_id","template_params","from_name","to_name","to_email","message","headers","JSON","stringify","fetch","method","body","response","ok","statusText","Persons","setPersons","setResult","loading","setLoading","onSend","onPersonUpdated","person","index","findIndex","item","updatedPersons","personRows","map","key","InfoText","loader","Center","buttons","reduce","max","newPersons","info","Success","Error","Fragment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0b890e10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Persons\":\"Persons_Persons__SEKnd\",\"Center\":\"Persons_Center__1rLmt\",\"InfoText\":\"Persons_InfoText__1oyl_\",\"Success\":\"Persons_Success__1u9th\",\"Error\":\"Persons_Error__2qCTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__1oOnS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"Success\":\"Button_Success__2Rka1\",\"Danger\":\"Button_Danger__2ogZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputText\":\"InputText_InputText__1TyfP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__ANdA0\",\"spin\":\"Loader_spin__3pTHl\"};","import React from 'react'\nimport classes from './InputText.module.css'\n\nconst InputText = props => {\n    return (<input value={props.value} onChange={props.changed} className={classes.InputText} type=\"text\" placeholder={props.placeholder} />)\n}\n\nexport default InputText","class PersonData {\n    constructor(id, name, email) {\n        this.id = id\n        this.name = name\n        this.email = email\n    }\n}\n\nexport default PersonData","import React, {useEffect, useState} from \"react\";\nimport InputText from '../UI/InputText/InputText'\nimport PersonData from '../../domain/person'\nimport classes from \"./Person.module.css\";\n\nconst Person = (props) => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [id, setId] = useState()\n  \n  useEffect(() => {\n    const name = props.data.name\n    if (!name || name.length === 0) {\n      setName('')\n    } else {\n      setName(name)\n    }\n    const email = props.data.email\n    if (!email || email.length === 0) {\n      setEmail('')\n    } else {\n      setEmail(email)\n    }\n    const id = props.data.id\n    if (!id || id.length === 0) {\n      setId('')\n    } else {\n      setId(id)\n    }\n  }, [props.data])\n\n  const onNameChange = (value) => {\n    setName(value)\n    props.onUpdate(new PersonData(id, value, email))\n  }\n\n  const onEmailChange = (value) => {\n    setEmail(value)\n    props.onUpdate(new PersonData(id, name, value))\n  }\n\n  return (\n    <div className={classes.Person}>\n      <InputText value={name} changed={(event) => onNameChange(event.target.value)} className={classes.PersonName} placeholder='Imię'/>\n      <InputText value={email} changed={(event) => onEmailChange(event.target.value)} className={classes.PersonEmail} placeholder='Email'/>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react'\nimport classes from './Button.module.css'\n\nconst Button = props => {\n    return <button className={[classes.Button, classes[props.btnType]].join(' ')} onClick={props.onClicked}>{props.children}</button>\n}\n\nexport default Button","import React from 'react'\nimport classes from './Loader.module.css'\n\nconst Loader = props => {\n    return <div className={classes.Loader}></div>\n}\n\nexport default Loader","import { URL, PARAM1, PARAM2, PARAM3 } from \"../constants/values\";\n\nexport const handlePersons = async (persons) => {\n  let result = true\n  for (const p of persons) {\n    console.log(\"send to\", p.email, p.name);\n    const messageRes = await sendMessage(p.email, p.name)\n    result &= messageRes\n    console.log('result', messageRes)\n  };\n  //const result = await resolveAfter2Seconds();\n  return mapResult(result)\n};\n\nconst mapResult = (result) => {\n  if (result) {\n    return \"ok\"\n  } else {\n    return \"error\"\n  }\n}\n\nconst resolveAfter2Seconds = () => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"error\");\n    }, 2000);\n  });\n}\n\nconst sendMessage = async (to, toName) => {\n  const paramsData = {\n    service_id: `service_${PARAM1}`,\n    template_id: `template_${PARAM2}`,\n    user_id: `user_${PARAM3}`,\n    template_params: {\n      from_name: \"Święty Mikołaj\",\n      to_name: toName,\n      to_email: to,\n      message: \"Test wiadomości\",\n    },\n  };\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n  const data = JSON.stringify(paramsData);\n  const response = await fetch(URL, {\n    method: \"POST\",\n    headers: headers,\n    body: data,\n  });\n\n  console.log(response);\n  if (!response.ok) {\n    console.log(\"error!\");\n    return false\n  } else {\n    const resData = response.statusText;\n    return true\n  }\n};\n","export const URL = \"https://api.emailjs.com/api/v1.0/email/send\"\nexport const PARAM1 = '4i66flw'\nexport const PARAM2 = 'gjlo5p4'\nexport const PARAM3 = 'gkMpfertGe7lwIlEFmfzX'","import React, { useState } from \"react\";\nimport Person from \"../Person/Person\";\nimport Button from \"../UI/Button/Button\";\nimport Loader from \"../UI/Loader/Loader\";\nimport classes from \"./Persons.module.css\";\nimport PersonData from \"../../domain/person\";\nimport { handlePersons } from \"../../utils/email\";\n\nconst Persons = (props) => {\n  const [persons, setPersons] = useState([]);\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const onNewPerson = () => {\n    let id = 1;\n    if (persons.length > 0) {\n      id =\n        persons.reduce(\n          (max, person, index, persons) =>\n            persons[index].id > max ? persons[index].id : max,\n          0\n        ) + 1;\n    }\n    const newPersons = [...persons, new PersonData(id, \"\", \"\")];\n    setPersons(newPersons);\n  };\n\n  const onSend = async () => {\n    setLoading(true);\n    const result = await handlePersons(persons);\n    setResult(result);\n    setLoading(false);\n  };\n\n  const onPersonUpdated = (person) => {\n    const index = persons.findIndex((item) => item.id === person.id);\n    const updatedPersons = [...persons];\n    updatedPersons[index] = person;\n    setPersons(updatedPersons);\n  };\n\n  let personRows = persons.map((p) => (\n    <Person key={p.id} data={p} onUpdate={onPersonUpdated} />\n  ));\n  if (persons.length === 0) {\n    personRows = (\n      <div className={classes.InfoText}>\n        Proszę dodać osoby i adresy mailowe\n      </div>\n    );\n  }\n  let loader = null;\n  if (loading) {\n    loader = (\n      <div className={classes.Center}>\n        <Loader />\n      </div>\n    );\n  }\n  let buttons = null;\n  if (!loading && (!result || result.length === 0)) {\n    buttons = (\n      <div className={classes.Center}>\n        <Button btnType=\"Success\" onClicked={onNewPerson}>\n          Dodaj\n        </Button>\n        <Button btnType=\"Danger\" onClicked={onSend}>\n          Losuj\n        </Button>\n      </div>\n    );\n  }\n  let info = null;\n  if (!loading && result && result.length > 0) {\n    info = (\n      <div className={classes.Center}>\n        {result === \"ok\" ? (\n          <div className={[classes.InfoText, classes.Success].join(' ')}>Wiadomości zostały wysłane.</div>\n        ) : null}\n        {result === \"error\" ? (\n          <div className={[classes.InfoText, classes.Error].join(' ')}>Wystąpił błąd podczas wysyłania wiadomości!</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <div className={classes.Persons}>{personRows}</div>\n      {buttons}\n      {loader}\n      {info}\n    </React.Fragment>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\nimport Persons from \"./components/Persons/Persons\";\n\nfunction App() {\n  return (\n    <div>\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}