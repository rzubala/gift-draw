{"version":3,"sources":["components/Person/Person.module.css","components/Persons/Persons.module.css","components/UI/Button/Button.module.css","components/UI/InputText/InputText.module.css","components/UI/InputText/InputText.js","components/Person/Person.js","components/UI/Button/Button.js","domain/person.js","components/Persons/Persons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputText","props","value","onChange","changed","className","classes","type","placeholder","Person","useState","name","setName","email","setEmail","useEffect","data","length","event","target","PersonName","PersonEmail","Button","btnType","join","onClick","onClicked","children","PersonData","id","this","Persons","persons","setPersons","personRows","map","p","key","Math","random","InfoText","Fragment","Buttons","newPersons","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,gBCA/DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,SAAW,4B,gBCAnGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,OAAS,yB,kBCA7FD,EAAOC,QAAU,CAAC,UAAY,+B,wKCMfC,EAJG,SAAAC,GACd,OAAQ,2BAAOC,MAAOD,EAAMC,MAAOC,SAAUF,EAAMG,QAASC,UAAWC,IAAQN,UAAWO,KAAK,OAAOC,YAAaP,EAAMO,e,gBCmC9GC,EAnCA,SAACR,GAAW,IAAD,EACAS,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,OAEEF,mBAAS,IAFX,mBAEjBG,EAFiB,KAEVC,EAFU,KAIxBC,qBAAU,WACR,IAAMJ,EAAOV,EAAMe,KAAKL,KACnBA,GAAwB,IAAhBA,EAAKM,OAGhBL,EAAQD,GAFRC,EAAQ,IAIV,IAAMC,EAAQZ,EAAMe,KAAKH,MACpBA,GAA0B,IAAjBA,EAAMI,OAGlBH,EAASD,GAFTC,EAAS,MAIV,CAACb,EAAMe,OAUV,OACE,yBAAKX,UAAWC,IAAQG,QACtB,kBAAC,EAAD,CAAWP,MAAOS,EAAMP,QAAS,SAACc,GAAD,OAVfhB,EAUuCgB,EAAMC,OAAOjB,WATxEU,EAAQV,GADW,IAACA,GAU4DG,UAAWC,IAAQc,WAAYZ,YAAY,cACzH,kBAAC,EAAD,CAAWN,MAAOW,EAAOT,QAAS,SAACc,GAAD,OAPfhB,EAOwCgB,EAAMC,OAAOjB,WAN1EY,EAASZ,GADW,IAACA,GAO6DG,UAAWC,IAAQe,YAAab,YAAY,Y,gBC3BnHc,EAJA,SAAArB,GACX,OAAO,4BAAQI,UAAW,CAACC,IAAQgB,OAAQhB,IAAQL,EAAMsB,UAAUC,KAAK,KAAMC,QAASxB,EAAMyB,WAAYzB,EAAM0B,W,wBCIpGC,EAPX,WAAYC,EAAIlB,EAAME,GAAQ,oBAC1BiB,KAAKD,GAAKA,EACVC,KAAKnB,KAAOA,EACZmB,KAAKjB,MAAQA,GC+BNkB,EA7BC,SAAC9B,GAAW,IAAD,EACKS,mBAAS,IADd,mBAClBsB,EADkB,KACTC,EADS,KAWrBC,EAAaF,EAAQG,KAAI,SAACC,GAAD,OAC3B,kBAAC,EAAD,CAAQC,IAAKC,KAAKC,SAAUvB,KAAMoB,OAMpC,OAJuB,IAAnBJ,EAAQf,SACRiB,EAAc,yBAAK7B,UAAWC,IAAQkC,UAAxB,kDAIhB,kBAAC,IAAMC,SAAP,KACE,yBAAKpC,UAAWC,IAAQyB,SAAUG,GAClC,yBAAK7B,UAAWC,IAAQoC,SACpB,kBAAC,EAAD,CAAQnB,QAAQ,UAAUG,UAnBd,WAClB,IAAMiB,EAAU,sBACXX,GADW,CAEd,IAAIJ,EAAWI,EAAQf,OAAS,EAAG,GAAI,MAEzCgB,EAAWU,KAcL,SACA,kBAAC,EAAD,CAAQpB,QAAQ,UAAhB,YClBKqB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.524ea85c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__1oOnS\",\"PersonName\":\"Person_PersonName__Wv1Yk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Persons\":\"Persons_Persons__SEKnd\",\"Buttons\":\"Persons_Buttons__3SlmF\",\"InfoText\":\"Persons_InfoText__1oyl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3gFiX\",\"Success\":\"Button_Success__2Rka1\",\"Danger\":\"Button_Danger__2ogZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputText\":\"InputText_InputText__1TyfP\"};","import React from 'react'\nimport classes from './InputText.module.css'\n\nconst InputText = props => {\n    return (<input value={props.value} onChange={props.changed} className={classes.InputText} type=\"text\" placeholder={props.placeholder} />)\n}\n\nexport default InputText","import React, {useEffect, useState} from \"react\";\nimport InputText from '../UI/InputText/InputText'\nimport classes from \"./Person.module.css\";\n\nconst Person = (props) => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  \n  useEffect(() => {\n    const name = props.data.name\n    if (!name || name.length === 0) {\n      setName('')\n    } else {\n      setName(name)\n    }\n    const email = props.data.email\n    if (!email || email.length === 0) {\n      setEmail('')\n    } else {\n      setEmail(email)\n    }\n  }, [props.data])\n\n  const onNameChange = (value) => {\n    setName(value)\n  }\n\n  const onEmailChange = (value) => {\n    setEmail(value)\n  }\n\n  return (\n    <div className={classes.Person}>\n      <InputText value={name} changed={(event) => onNameChange(event.target.value)} className={classes.PersonName} placeholder='Imię'/>\n      <InputText value={email} changed={(event) => onEmailChange(event.target.value)} className={classes.PersonEmail} placeholder='Email'/>\n    </div>\n  );\n};\n\nexport default Person;\n","import React from 'react'\nimport classes from './Button.module.css'\n\nconst Button = props => {\n    return <button className={[classes.Button, classes[props.btnType]].join(' ')} onClick={props.onClicked}>{props.children}</button>\n}\n\nexport default Button","class PersonData {\n    constructor(id, name, email) {\n        this.id = id\n        this.name = name\n        this.email = email\n    }\n}\n\nexport default PersonData","import React, { useState, useEffect, useCallback } from \"react\";\nimport Person from \"../Person/Person\";\nimport Button from '../UI/Button/Button'\nimport classes from \"./Persons.module.css\";\nimport PersonData from \"../../domain/person\";\n\nconst Persons = (props) => {\n  const [persons, setPersons] = useState([]);\n\n  const onNewPerson = () => {\n    const newPersons = [\n      ...persons,\n      new PersonData(persons.length + 1, \"\", \"\"),\n    ];\n    setPersons(newPersons);    \n  }\n\n  let personRows = persons.map((p) => (\n    <Person key={Math.random()} data={p} />\n  ));\n  if (persons.length === 0) {\n      personRows = (<div className={classes.InfoText}>Proszę dodać osoby i adresy mailowe</div>)\n  }\n\n  return (\n    <React.Fragment>\n      <div className={classes.Persons}>{personRows}</div>\n      <div className={classes.Buttons}>\n          <Button btnType='Success' onClicked={onNewPerson}>Dodaj</Button>\n          <Button btnType='Danger'>Losuj</Button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\nimport Persons from \"./components/Persons/Persons\";\n\nfunction App() {\n  return (\n    <div>\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}